<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:UMLLabProfile="http:///schemas/UMLLabProfile/NS/0" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML" xsi:schemaLocation="http:///schemas/UMLLabProfile/NS/0 pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile-Annotation_2-UMLLabProfile">
  <uml:Model xmi:id="_u0qIQIGLEeatoIS3jXI6_Q" name="CS308_W60_Task1">
    <eAnnotations xmi:id="_vMbIAIGLEeatoIS3jXI6_Q" source="http://ns.yatta.de/umllab">
      <contents xmi:type="ecore:EAnnotation" xmi:id="_vMeLUIGLEeatoIS3jXI6_Q" source="codegen">
        <details xmi:id="_vMeLUYGLEeatoIS3jXI6_Q" key="codegenDirectory" value="/CS308-W60-Task1/src"/>
        <details xmi:id="_vMvREIGLEeatoIS3jXI6_Q" key="observedFolders" value="/CS308-W60-Task1/src"/>
        <details xmi:id="_3PIkwIGMEeatoIS3jXI6_Q" key="AssociatedSourceCode" value="/CS308-W60-Task1/src/Node.java;3417501530/1;/CS308-W60-Task1/src/Graph.java;2286560706/1;/CS308-W60-Task1/src/Driver.java;1336426141/1;/CS308-W60-Task1/src/MetroMapParser.java;1188667089/1;"/>
      </contents>
    </eAnnotations>
    <elementImport xmi:id="_c-HIAIGMEeatoIS3jXI6_Q">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
    </elementImport>
    <elementImport xmi:id="_c-HvEIGMEeatoIS3jXI6_Q">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
    </elementImport>
    <elementImport xmi:id="_c-HvEYGMEeatoIS3jXI6_Q">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#char"/>
    </elementImport>
    <elementImport xmi:id="_c-IWIIGMEeatoIS3jXI6_Q">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
    </elementImport>
    <elementImport xmi:id="_c-IWIYGMEeatoIS3jXI6_Q">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#float"/>
    </elementImport>
    <elementImport xmi:id="_c-IWIoGMEeatoIS3jXI6_Q">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
    </elementImport>
    <elementImport xmi:id="_c-I9MIGMEeatoIS3jXI6_Q">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
    </elementImport>
    <elementImport xmi:id="_c-I9MYGMEeatoIS3jXI6_Q">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#short"/>
    </elementImport>
    <elementImport xmi:id="_dAqswIGMEeatoIS3jXI6_Q">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
    </elementImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_exCW0IGPEeaBfdFKiZ9CMA" name="java">
      <packagedElement xmi:type="uml:Package" xmi:id="_exC94IGPEeaBfdFKiZ9CMA" name="io">
        <packagedElement xmi:type="uml:Class" xmi:id="_exWf4IGPEeaBfdFKiZ9CMA" name="BufferedReader"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_exXuAYGPEeaBfdFKiZ9CMA" name="FileReader"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_exZjMIGPEeaBfdFKiZ9CMA" name="IOException"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_exC94YGPEeaBfdFKiZ9CMA" name="util">
        <packagedElement xmi:type="uml:Class" xmi:id="_exaKQYGPEeaBfdFKiZ9CMA" name="StringTokenizer"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_rPNHsIGPEeaBfdFKiZ9CMA" name="lang">
        <packagedElement xmi:type="uml:Class" xmi:id="_rPNHsYGPEeaBfdFKiZ9CMA" name="Exception"/>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_wRvxUIGLEeatoIS3jXI6_Q" name="Node" visibility="public">
      <ownedAttribute xmi:id="_d52XgIGMEeatoIS3jXI6_Q" name="id">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_irDcsIGMEeatoIS3jXI6_Q" name="inbound" visibility="public" type="_wRvxUIGLEeatoIS3jXI6_Q"/>
      <ownedAttribute xmi:id="_jsYW0IGMEeatoIS3jXI6_Q" name="outbound" type="_wRvxUIGLEeatoIS3jXI6_Q" association="_5v21EYGMEeatoIS3jXI6_Q"/>
      <ownedAttribute xmi:id="_mNawMIGMEeatoIS3jXI6_Q" name="color">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_BSybAIGNEeatoIS3jXI6_Q" name="name">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_A9tbg4GQEeaBfdFKiZ9CMA" name="graph" type="_HQu1kIGMEeatoIS3jXI6_Q" association="_A9s0cIGQEeaBfdFKiZ9CMA">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_A9tbhIGQEeaBfdFKiZ9CMA"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_A9tbhYGQEeaBfdFKiZ9CMA" value="*"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_HQu1kIGMEeatoIS3jXI6_Q" name="Graph">
      <ownedAttribute xmi:id="_x3t0IIGMEeatoIS3jXI6_Q" name="nodes" type="_wRvxUIGLEeatoIS3jXI6_Q"/>
      <ownedAttribute xmi:id="_A9tbgIGQEeaBfdFKiZ9CMA" name="node" type="_wRvxUIGLEeatoIS3jXI6_Q" association="_A9s0cIGQEeaBfdFKiZ9CMA">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_A9tbgYGQEeaBfdFKiZ9CMA"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_A9tbgoGQEeaBfdFKiZ9CMA" value="*"/>
      </ownedAttribute>
      <ownedOperation xmi:id="_sEBXMIGMEeatoIS3jXI6_Q" name="search"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_IVKuEIGMEeatoIS3jXI6_Q" name="Driver">
      <ownedOperation xmi:id="_0BuNkIGMEeatoIS3jXI6_Q" name="main"/>
      <ownedOperation xmi:id="_1TuoAIGMEeatoIS3jXI6_Q" name="reader"/>
      <ownedOperation xmi:id="_2DVgAIGMEeatoIS3jXI6_Q" name="display"/>
    </packagedElement>
    <packagedElement xmi:type="uml:DataType" xmi:id="_jsY94IGMEeatoIS3jXI6_Q" name="node"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_5v21EYGMEeatoIS3jXI6_Q" name="" memberEnd="_jsYW0IGMEeatoIS3jXI6_Q _5v21EoGMEeatoIS3jXI6_Q">
      <ownedEnd xmi:id="_5v21EoGMEeatoIS3jXI6_Q" name="" type="_wRvxUIGLEeatoIS3jXI6_Q" association="_5v21EYGMEeatoIS3jXI6_Q"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_0QfXcIGOEeaBfdFKiZ9CMA" name="MetroMapParser">
      <ownedComment xmi:id="_gUo3lYGPEeaBfdFKiZ9CMA">
        <body>This class reads a text description of a metro subway system&#xD;
     * and generates a graph representation of the metro.&#xD;
     *&#xD;
     * Students should feel free to modify this code as needed&#xD;
     *  to complete this exercise.&#xD;
     *&#xD;
     *&lt;p>&#xD;
     *&#xD;
     * The grammar for the file is described below in BNF. A typical line&#xD;
     * in the file looks like this :&#xD;
     *&#xD;
     * &lt;code> 20 NorthStation   Green 19 22  Orange 15 22  &lt;/code>&#xD;
     *&#xD;
     * where :&#xD;
     *         20 is the StationID&#xD;
     *         NorthStation is the StationName&#xD;
     *         Green 19 22&#xD;
     *                  Green is the LineName&#xD;
     *                  19 is the StationID of the outbound station&#xD;
     *                  22 is the StationID of the inbound station&#xD;
     *         Orange 15 22 is a LineID in which :&#xD;
     *                  Orange is the LineName&#xD;
     *                  15 is the StationID of the outbound station&#xD;
     *                  22 is the StationID of the inbound station&#xD;
     *&#xD;
     *         Therefore, NorthStation has two outgoing lines.&#xD;
     *&#xD;
     *  note : 0 denotes the end of a line : i.e. in this case,&#xD;
     *  OakGrove would be at the end of the line, as there is no other outbound &#xD;
     *  station.&#xD;
     *&#xD;
     *&lt;p>&#xD;
     * metro-map ::= station-spec* &lt;BR>&#xD;
     * station-spec ::= station-id station-name station-line+ &lt;BR>&#xD;
     * station-id ::= (positive integer) &lt;BR>&#xD;
     * station-name ::= string &lt;BR>&#xD;
     * station-line ::= line-name station-id station-id &lt;BR>&#xD;
     *</body>
      </ownedComment>
      <ownedAttribute xmi:id="_gUnpcIGPEeaBfdFKiZ9CMA" name="fileInput" visibility="private" type="_exWf4IGPEeaBfdFKiZ9CMA" association="_gUqFsIGPEeaBfdFKiZ9CMA"/>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_gUoQgIGPEeaBfdFKiZ9CMA" name="main" specification="_b0j-oIGPEeaBfdFKiZ9CMA">
        <ownedParameter xmi:id="_gUoQgYGPEeaBfdFKiZ9CMA" name="args">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gUoQgoGPEeaBfdFKiZ9CMA" value="*"/>
        </ownedParameter>
        <language>java</language>
        <body>if(args.length != 1)&#xD;
	{&#xD;
	    usage();&#xD;
	    System.exit(0);&#xD;
	}&#xD;
&#xD;
	String filename = args[0];&#xD;
	&#xD;
	&#xD;
	try&#xD;
	{&#xD;
	    MetroMapParser mmp = new MetroMapParser(filename);&#xD;
	    mmp.generateGraphFromFile();&#xD;
	}&#xD;
	catch(Exception e)&#xD;
	{&#xD;
	    e.printStackTrace();&#xD;
	}&#xD;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_gUo3kIGPEeaBfdFKiZ9CMA" name="usage" specification="_D8k10IGPEeaBfdFKiZ9CMA">
        <language>java</language>
        <body>//prints a usage message to System.out&#xD;
	System.out.println(&quot;java ex3.MetroMapParser &lt;filename>&quot;);&#xD;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_gUo3kYGPEeaBfdFKiZ9CMA" name="MetroMapParser" specification="_GRKuoIGPEeaBfdFKiZ9CMA">
        <ownedParameter xmi:id="_gUo3koGPEeaBfdFKiZ9CMA" type="_0QfXcIGOEeaBfdFKiZ9CMA" direction="return">
          <name xsi:nil="true"/>
        </ownedParameter>
        <ownedParameter xmi:id="_gUo3k4GPEeaBfdFKiZ9CMA" name="filename">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <language>java</language>
        <body>//a buffered reader reads line by line, returning null when file is done&#xD;
	fileInput = new BufferedReader(new FileReader(filename));&#xD;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_gUo3lIGPEeaBfdFKiZ9CMA" name="generateGraphFromFile" specification="_S02RoIGPEeaBfdFKiZ9CMA">
        <language>java</language>
        <body>String line = fileInput.readLine();&#xD;
	StringTokenizer st;&#xD;
	String stationID;&#xD;
	String stationName;&#xD;
	String lineName;&#xD;
	String outboundID, inboundID;&#xD;
	&#xD;
	while(line != null)&#xD;
	{&#xD;
&#xD;
	    //STUDENT :&#xD;
	    //&#xD;
	    //in this loop, you must collect the information necessary to &#xD;
	    //construct your graph, and you must construct your graph as well.&#xD;
	    //how and where you do this will depend on the design of your graph.&#xD;
	    //&#xD;
&#xD;
	    &#xD;
	    //StringTokenizer is a java.util Class that can break a string into tokens&#xD;
	    // based on a specified delimiter.  The default delimiter is &quot; \t\n\r\f&quot; which&#xD;
	    // corresponds to the space character, the tab character, the newline character,&#xD;
	    // the carriage-return character and the form-feed character.&#xD;
	    st = new StringTokenizer(line);&#xD;
&#xD;
	    //We want to handle empty lines effectively, we just ignore them!&#xD;
	    if(!st.hasMoreTokens())&#xD;
	    {&#xD;
		line = fileInput.readLine();&#xD;
		continue;&#xD;
	    }&#xD;
	    &#xD;
	    //from the grammar, we know that the Station ID is the first token on the line&#xD;
	    stationID = st.nextToken();&#xD;
	    &#xD;
	    if(!st.hasMoreTokens())&#xD;
	    {&#xD;
		throw new Exception(&quot;no station name&quot;);&#xD;
	    }&#xD;
&#xD;
	    //from the grammar, we know that the Station Name is the second token on the line.&#xD;
	    stationName = st.nextToken();&#xD;
	    &#xD;
	    if(!st.hasMoreTokens())&#xD;
	    {&#xD;
		throw new Exception(&quot;station is on no lines&quot;);&#xD;
	    }&#xD;
	    &#xD;
&#xD;
	    while(st.hasMoreTokens())&#xD;
	    {&#xD;
		lineName = st.nextToken();&#xD;
			&#xD;
		if(!st.hasMoreTokens())&#xD;
		{&#xD;
		    throw new Exception(&quot;poorly formatted line info&quot;);&#xD;
		}&#xD;
&#xD;
		outboundID = st.nextToken();&#xD;
		&#xD;
		if(!st.hasMoreTokens())&#xD;
		{&#xD;
		    throw new Exception(&quot;poorly formatted adjacent stations&quot;);&#xD;
		}&#xD;
&#xD;
		inboundID = st.nextToken();&#xD;
	    }&#xD;
	    	&#xD;
		&#xD;
	    line = fileInput.readLine();&#xD;
	}&#xD;
	&#xD;
    &#xD;
 </body>
      </ownedBehavior>
      <ownedOperation xmi:id="_D8k10IGPEeaBfdFKiZ9CMA" name="usage" visibility="private" isStatic="true" method="_gUo3kIGPEeaBfdFKiZ9CMA"/>
      <ownedOperation xmi:id="_GRKuoIGPEeaBfdFKiZ9CMA" name="MetroMapParser" method="_gUo3kYGPEeaBfdFKiZ9CMA" raisedException="_exZjMIGPEeaBfdFKiZ9CMA">
        <eAnnotations xmi:id="_gUcDQIGPEeaBfdFKiZ9CMA" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <details xmi:id="_gUcDQYGPEeaBfdFKiZ9CMA" key="create"/>
        </eAnnotations>
        <ownedComment xmi:id="_gUpeoIGPEeaBfdFKiZ9CMA">
          <body>@effects: creates a new parser that will read from the file &#xD;
     * filename unless the file does not exist. The filename should specify&#xD;
     * the exact location of the file. This means it should be something like&#xD;
     * /mit/$USER/6.170/ex3/bostonmetro.txt&#xD;
     *&#xD;
     * &#xD;
     * @throws java.io.IOException if there &lt;tt>filename&lt;/tt> cannot be read&#xD;
     *&#xD;
     * @returns a new MetroMapParser that will parse the file filename</body>
        </ownedComment>
        <ownedParameter xmi:id="_gUcDQoGPEeaBfdFKiZ9CMA" type="_0QfXcIGOEeaBfdFKiZ9CMA" direction="return"/>
        <ownedParameter xmi:id="_gUftoIGPEeaBfdFKiZ9CMA" name="filename">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_S02RoIGPEeaBfdFKiZ9CMA" name="generateGraphFromFile" method="_gUo3lIGPEeaBfdFKiZ9CMA" raisedException="_rPNHsYGPEeaBfdFKiZ9CMA">
        <ownedComment xmi:id="_gUpeoYGPEeaBfdFKiZ9CMA">
          <body>@throws Exception &#xD;
     * @effects: parses the file, and generates a graph from it, unless there&#xD;
     * is a problem reading the file, or there is a problem with the format of the&#xD;
     * file.&#xD;
     *&#xD;
     * @throws ex3.BadFileException if there is a problem with the format of the file&#xD;
     *&#xD;
     * @returns the Graph generated by the file</body>
        </ownedComment>
      </ownedOperation>
      <ownedOperation xmi:id="_b0j-oIGPEeaBfdFKiZ9CMA" name="main" isStatic="true" method="_gUoQgIGPEeaBfdFKiZ9CMA">
        <ownedParameter xmi:id="_gUfGkIGPEeaBfdFKiZ9CMA" name="args">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gUfGkYGPEeaBfdFKiZ9CMA" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_exEzEIGPEeaBfdFKiZ9CMA" name="ex3">
      <packagedElement xmi:type="uml:Class" xmi:id="_exH2YIGPEeaBfdFKiZ9CMA" name="MetroMapParser">
        <ownedComment xmi:id="_exoMsIGPEeaBfdFKiZ9CMA">
          <body>This class reads a text description of a metro subway system&#xD;
     * and generates a graph representation of the metro.&#xD;
     *&#xD;
     * Students should feel free to modify this code as needed&#xD;
     *  to complete this exercise.&#xD;
     *&#xD;
     *&lt;p>&#xD;
     *&#xD;
     * The grammar for the file is described below in BNF. A typical line&#xD;
     * in the file looks like this :&#xD;
     *&#xD;
     * &lt;code> 20 NorthStation   Green 19 22  Orange 15 22  &lt;/code>&#xD;
     *&#xD;
     * where :&#xD;
     *         20 is the StationID&#xD;
     *         NorthStation is the StationName&#xD;
     *         Green 19 22&#xD;
     *                  Green is the LineName&#xD;
     *                  19 is the StationID of the outbound station&#xD;
     *                  22 is the StationID of the inbound station&#xD;
     *         Orange 15 22 is a LineID in which :&#xD;
     *                  Orange is the LineName&#xD;
     *                  15 is the StationID of the outbound station&#xD;
     *                  22 is the StationID of the inbound station&#xD;
     *&#xD;
     *         Therefore, NorthStation has two outgoing lines.&#xD;
     *&#xD;
     *  note : 0 denotes the end of a line : i.e. in this case,&#xD;
     *  OakGrove would be at the end of the line, as there is no other outbound &#xD;
     *  station.&#xD;
     *&#xD;
     *&lt;p>&#xD;
     * metro-map ::= station-spec* &lt;BR>&#xD;
     * station-spec ::= station-id station-name station-line+ &lt;BR>&#xD;
     * station-id ::= (positive integer) &lt;BR>&#xD;
     * station-name ::= string &lt;BR>&#xD;
     * station-line ::= line-name station-id station-id &lt;BR>&#xD;
     *</body>
        </ownedComment>
        <ownedAttribute xmi:id="_exjUMIGPEeaBfdFKiZ9CMA" name="fileInput" visibility="private" type="_exWf4IGPEeaBfdFKiZ9CMA" association="_exozwIGPEeaBfdFKiZ9CMA"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_exkiUIGPEeaBfdFKiZ9CMA" name="main" specification="_exIdcIGPEeaBfdFKiZ9CMA">
          <ownedParameter xmi:id="_exkiUYGPEeaBfdFKiZ9CMA" name="args">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_exkiUoGPEeaBfdFKiZ9CMA" value="*"/>
          </ownedParameter>
          <language>java</language>
          <body>if(args.length != 1)&#xD;
	{&#xD;
	    usage();&#xD;
	    System.exit(0);&#xD;
	}&#xD;
&#xD;
	String filename = args[0];&#xD;
	&#xD;
	&#xD;
	try&#xD;
	{&#xD;
	    MetroMapParser mmp = new MetroMapParser(filename);&#xD;
	    mmp.generateGraphFromFile();&#xD;
	}&#xD;
	catch(Exception e)&#xD;
	{&#xD;
	    e.printStackTrace();&#xD;
	}&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_exm-kIGPEeaBfdFKiZ9CMA" name="usage" specification="_exJEgoGPEeaBfdFKiZ9CMA">
          <language>java</language>
          <body>//prints a usage message to System.out&#xD;
	System.out.println(&quot;java ex3.MetroMapParser &lt;filename>&quot;);&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_exnloIGPEeaBfdFKiZ9CMA" name="MetroMapParser" specification="_exKSoIGPEeaBfdFKiZ9CMA">
          <ownedParameter xmi:id="_exnloYGPEeaBfdFKiZ9CMA" name="filename">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_exnlooGPEeaBfdFKiZ9CMA" type="_exH2YIGPEeaBfdFKiZ9CMA" direction="return">
            <name xsi:nil="true"/>
          </ownedParameter>
          <language>java</language>
          <body>//a buffered reader reads line by line, returning null when file is done&#xD;
	fileInput = new BufferedReader(new FileReader(filename));&#xD;
 </body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_exnlo4GPEeaBfdFKiZ9CMA" name="generateGraphFromFile" specification="_exLgwIGPEeaBfdFKiZ9CMA">
          <language>java</language>
          <body>String line = fileInput.readLine();&#xD;
	StringTokenizer st;&#xD;
	String stationID;&#xD;
	String stationName;&#xD;
	String lineName;&#xD;
	String outboundID, inboundID;&#xD;
	&#xD;
	while(line != null)&#xD;
	{&#xD;
&#xD;
	    //STUDENT :&#xD;
	    //&#xD;
	    //in this loop, you must collect the information necessary to &#xD;
	    //construct your graph, and you must construct your graph as well.&#xD;
	    //how and where you do this will depend on the design of your graph.&#xD;
	    //&#xD;
&#xD;
	    &#xD;
	    //StringTokenizer is a java.util Class that can break a string into tokens&#xD;
	    // based on a specified delimiter.  The default delimiter is &quot; \t\n\r\f&quot; which&#xD;
	    // corresponds to the space character, the tab character, the newline character,&#xD;
	    // the carriage-return character and the form-feed character.&#xD;
	    st = new StringTokenizer(line);&#xD;
&#xD;
	    //We want to handle empty lines effectively, we just ignore them!&#xD;
	    if(!st.hasMoreTokens())&#xD;
	    {&#xD;
		line = fileInput.readLine();&#xD;
		continue;&#xD;
	    }&#xD;
	    &#xD;
	    //from the grammar, we know that the Station ID is the first token on the line&#xD;
	    stationID = st.nextToken();&#xD;
	    &#xD;
	    if(!st.hasMoreTokens())&#xD;
	    {&#xD;
		throw new BadFileException(&quot;no station name&quot;);&#xD;
	    }&#xD;
&#xD;
	    //from the grammar, we know that the Station Name is the second token on the line.&#xD;
	    stationName = st.nextToken();&#xD;
	    &#xD;
	    if(!st.hasMoreTokens())&#xD;
	    {&#xD;
		throw new BadFileException(&quot;station is on no lines&quot;);&#xD;
	    }&#xD;
	    &#xD;
&#xD;
	    while(st.hasMoreTokens())&#xD;
	    {&#xD;
		lineName = st.nextToken();&#xD;
			&#xD;
		if(!st.hasMoreTokens())&#xD;
		{&#xD;
		    throw new BadFileException(&quot;poorly formatted line info&quot;);&#xD;
		}&#xD;
&#xD;
		outboundID = st.nextToken();&#xD;
		&#xD;
		if(!st.hasMoreTokens())&#xD;
		{&#xD;
		    throw new BadFileException(&quot;poorly formatted adjacent stations&quot;);&#xD;
		}&#xD;
&#xD;
		inboundID = st.nextToken();&#xD;
	    }&#xD;
	    	&#xD;
		&#xD;
	    line = fileInput.readLine();&#xD;
	}&#xD;
	&#xD;
    &#xD;
 </body>
        </ownedBehavior>
        <ownedOperation xmi:id="_exIdcIGPEeaBfdFKiZ9CMA" name="main" isStatic="true" method="_exkiUIGPEeaBfdFKiZ9CMA">
          <ownedParameter xmi:id="_exJEgIGPEeaBfdFKiZ9CMA" name="args">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_exJEgYGPEeaBfdFKiZ9CMA" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_exJEgoGPEeaBfdFKiZ9CMA" name="usage" visibility="private" isStatic="true" method="_exm-kIGPEeaBfdFKiZ9CMA"/>
        <ownedOperation xmi:id="_exKSoIGPEeaBfdFKiZ9CMA" name="MetroMapParser" method="_exnloIGPEeaBfdFKiZ9CMA" raisedException="_exZjMIGPEeaBfdFKiZ9CMA">
          <eAnnotations xmi:id="_exK5sYGPEeaBfdFKiZ9CMA" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_exK5soGPEeaBfdFKiZ9CMA" key="create"/>
          </eAnnotations>
          <ownedComment xmi:id="_exoMsYGPEeaBfdFKiZ9CMA">
            <body>@effects: creates a new parser that will read from the file &#xD;
     * filename unless the file does not exist. The filename should specify&#xD;
     * the exact location of the file. This means it should be something like&#xD;
     * /mit/$USER/6.170/ex3/bostonmetro.txt&#xD;
     *&#xD;
     * &#xD;
     * @throws java.io.IOException if there &lt;tt>filename&lt;/tt> cannot be read&#xD;
     *&#xD;
     * @returns a new MetroMapParser that will parse the file filename</body>
          </ownedComment>
          <ownedParameter xmi:id="_exK5sIGPEeaBfdFKiZ9CMA" name="filename">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:id="_exK5s4GPEeaBfdFKiZ9CMA" type="_exH2YIGPEeaBfdFKiZ9CMA" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:id="_exLgwIGPEeaBfdFKiZ9CMA" name="generateGraphFromFile" method="_exnlo4GPEeaBfdFKiZ9CMA" raisedException="_exZjMIGPEeaBfdFKiZ9CMA _exg38IGPEeaBfdFKiZ9CMA">
          <ownedComment xmi:id="_exoMsoGPEeaBfdFKiZ9CMA">
            <body>@effects: parses the file, and generates a graph from it, unless there&#xD;
     * is a problem reading the file, or there is a problem with the format of the&#xD;
     * file.&#xD;
     *&#xD;
     * @throws java.io.IOException if there is a problem reading the file &#xD;
     * @throws ex3.BadFileException if there is a problem with the format of the file&#xD;
     *&#xD;
     * @returns the Graph generated by the file</body>
          </ownedComment>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_exg38IGPEeaBfdFKiZ9CMA" name="BadFileException"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_exozwIGPEeaBfdFKiZ9CMA" name="" memberEnd="_exozwYGPEeaBfdFKiZ9CMA _exjUMIGPEeaBfdFKiZ9CMA">
        <ownedEnd xmi:id="_exozwYGPEeaBfdFKiZ9CMA" name="" type="_exH2YIGPEeaBfdFKiZ9CMA" association="_exozwIGPEeaBfdFKiZ9CMA"/>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_gUqFsIGPEeaBfdFKiZ9CMA" name="" memberEnd="_gUqFsYGPEeaBfdFKiZ9CMA _gUnpcIGPEeaBfdFKiZ9CMA">
      <ownedEnd xmi:id="_gUqFsYGPEeaBfdFKiZ9CMA" name="" type="_0QfXcIGOEeaBfdFKiZ9CMA" association="_gUqFsIGPEeaBfdFKiZ9CMA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_A9s0cIGQEeaBfdFKiZ9CMA" name="" memberEnd="_A9tbgIGQEeaBfdFKiZ9CMA _A9tbg4GQEeaBfdFKiZ9CMA"/>
    <packagedElement xmi:type="uml:Usage" xmi:id="_UvHJcIGQEeaBfdFKiZ9CMA" client="_IVKuEIGMEeatoIS3jXI6_Q" supplier="_HQu1kIGMEeatoIS3jXI6_Q"/>
    <packagedElement xmi:type="uml:Usage" xmi:id="_VYxxgIGQEeaBfdFKiZ9CMA" client="_IVKuEIGMEeatoIS3jXI6_Q" supplier="_0QfXcIGOEeaBfdFKiZ9CMA"/>
    <profileApplication xmi:id="_vMgnkIGLEeatoIS3jXI6_Q">
      <eAnnotations xmi:id="_vMjD0IGLEeatoIS3jXI6_Q" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile-Annotation_2-UMLLabProfile"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile"/>
    </profileApplication>
  </uml:Model>
  <UMLLabProfile:TargetLanguage xmi:id="_vMqYkIGLEeatoIS3jXI6_Q" base_Package="_u0qIQIGLEeatoIS3jXI6_Q">
    <languageName>java</languageName>
  </UMLLabProfile:TargetLanguage>
  <UMLLabProfile:UnresolvedElement xmi:id="_jsaMAIGMEeatoIS3jXI6_Q" base_Element="_jsY94IGMEeatoIS3jXI6_Q"/>
  <UMLLabProfile:Reference xmi:id="_exXuAIGPEeaBfdFKiZ9CMA" base_Element="_exWf4IGPEeaBfdFKiZ9CMA"/>
  <UMLLabProfile:Reference xmi:id="_exY8IIGPEeaBfdFKiZ9CMA" base_Element="_exXuAYGPEeaBfdFKiZ9CMA"/>
  <UMLLabProfile:Reference xmi:id="_exaKQIGPEeaBfdFKiZ9CMA" base_Element="_exZjMIGPEeaBfdFKiZ9CMA"/>
  <UMLLabProfile:Reference xmi:id="_exdNkIGPEeaBfdFKiZ9CMA" base_Element="_exaKQYGPEeaBfdFKiZ9CMA"/>
  <UMLLabProfile:Reference xmi:id="_exitIIGPEeaBfdFKiZ9CMA" base_Element="_exg38IGPEeaBfdFKiZ9CMA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_exj7QIGPEeaBfdFKiZ9CMA" base_Element="_exjUMIGPEeaBfdFKiZ9CMA"/>
  <UMLLabProfile:Reference xmi:id="_exqB4IGPEeaBfdFKiZ9CMA" base_Element="_exozwIGPEeaBfdFKiZ9CMA"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_gUnpcYGPEeaBfdFKiZ9CMA" base_Element="_gUnpcIGPEeaBfdFKiZ9CMA"/>
  <UMLLabProfile:Reference xmi:id="_gUqswIGPEeaBfdFKiZ9CMA" base_Element="_gUqFsIGPEeaBfdFKiZ9CMA"/>
  <UMLLabProfile:Reference xmi:id="_rPNuwIGPEeaBfdFKiZ9CMA" base_Element="_rPNHsYGPEeaBfdFKiZ9CMA"/>
</xmi:XMI>
